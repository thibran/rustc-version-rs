var searchIndex = {};
searchIndex["rustc_version"] = {"doc":"Simple library for getting the version information of a `rustc`\ncompiler.","items":[[3,"VersionMeta","rustc_version","Rustc version plus metada like git short hash and build date.",null,null],[12,"semver","","Version of the compiler",0,null],[12,"commit_hash","","Git short hash of the build of the compiler",0,null],[12,"commit_date","","Commit date of the compiler",0,null],[12,"build_date","","Build date of the compiler; this was removed between Rust 1.0.0 and 1.1.0.",0,null],[12,"channel","","Release channel of the compiler",0,null],[12,"host","","Host target triple of the compiler",0,null],[12,"short_version_string","","Short version string of the compiler",0,null],[4,"Channel","","Release channel of the compiler.",null,null],[13,"Dev","","Development release channel",1,null],[13,"Nightly","","Nightly release channel",1,null],[13,"Beta","","Beta release channel",1,null],[13,"Stable","","Stable release channel",1,null],[5,"version","","Returns the `rustc` SemVer version.",null,{"inputs":[],"output":{"name":"version"}}],[5,"version_meta","","Returns the `rustc` SemVer version and additional metadata\nlike the git short hash and build date.",null,{"inputs":[],"output":{"name":"versionmeta"}}],[5,"version_meta_for","","Parses a &quot;rustc -vV&quot; output string and returns\nthe SemVer version and additional metadata\nlike the git short hash and build date.",null,{"inputs":[{"name":"str"}],"output":{"name":"versionmeta"}}],[5,"version_matches","","Check wether the `rustc` version matches the given SemVer\nversion requirement.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"hash","","",0,null]],"paths":[[3,"VersionMeta"],[4,"Channel"]]};
searchIndex["semver"] = {"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version\nnumbers. Matching operations can then be done with the `VersionReq` against a particular\nversion to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that&#39;s solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"ParseError","","A `ParseError` is returned as the `Err` side of a `Result` when a version is\nattempted to be parsed.",null,null],[13,"NonAsciiIdentifier","","All identifiers must be ASCII.",2,null],[13,"IncorrectParse","","The version was mis-parsed.",2,null],[13,"GenericFailure","","Any other failure.",2,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each\nenumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,null],[13,"InvalidSigil","","The sigil you have written is not correct.",3,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,null],[13,"MajorVersionRequired","","At least a major version is required.",3,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"parse","","Parse a string into a semver object.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,null],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,null],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"description","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",0,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other\nwords, any version will match against it.",4,{"inputs":[],"output":{"name":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `&quot;^1.2.3&quot;`\nand turns it into a `VersionReq` that matches that particular constraint.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,{"inputs":[{"name":"version"}],"output":{"name":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,null],[11,"fmt","","",4,null]],"paths":[[3,"Version"],[4,"Identifier"],[4,"ParseError"],[4,"ReqParseError"],[3,"VersionReq"]]};
initSearch(searchIndex);
